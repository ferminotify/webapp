<!--


⠀⠀⠀⠀⠀⠀⠀⠀⢀⣞⣆⢀⣠⢶⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢀⣀⡤⠤⠖⠒⠋⠉⣉⠉⠹⢫⠾⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢠⡏⢰⡴⠀⠀⠀⠉⠙⠟⠃⠀⠀⠀⠈⠙⠦⣄⡀⢀⣀⣠⡤⠤⠶⠒⠒⢿⠋⠈⠀⣒⡒⠲⠤⣄⡀⠀⠀⠀⠀⠀⠀
⢸⠀⢸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠴⠂⣀⠀⠀⣴⡄⠉⢷⡄⠚⠀⢤⣒⠦⠉⠳⣄⡀⠀⠀⠀
⠸⡄⠼⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⡂⠠⣀⠐⠍⠂⠙⣆⠀⠀
⠀⠙⠦⢄⣀⣀⣀⣀⡀⠀⢷⠀⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⠠⣀⠱⠘⣧⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠉⢷⣧⡄⢼⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⡈⠀⢄⢸⡄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⡀⠃⠘⠂⠲⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡈⢘⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢫⡑⠣⠰⠀⢁⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣸⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣯⠂⡀⢨⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡆⣾⡄⠀⠀⠀⠀⣀⠐⠁⡴⠁⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⡈⡀⢠⣧⣤⣀⣀⡀⢀⡀⠀⠀⢀⣼⣀⠉⡟⠀⢀⡀⠘⢓⣤⡞⠁⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⡁⢁⣸⡏⠀⠀⠀⠀⠁⠀⠉⠉⠁⠹⡟⢢⢱⠀⢸⣷⠶⠻⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⡏⠈⡟⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠁⠀⠻⣧⠀⠀⣹⠁⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡤⠚⠃⣰⣥⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠼⢙⡷⡻⠀⡼⠁⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠟⠿⡿⠕⠊⠉⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⣾⠉⣹⣷⣟⣚⣁⡼⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀



-->


<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Dashboard di Fermi Notify.">
    <meta propety="og:image" content="/img/og-logo.png">
    <meta property="og:description" content="Fermi Notify è un servizio non ufficiale dell'IS &quot;E. Fermi&quot; Mantova che invia delle notifiche per avvisare delle variazioni dell'orario del calendario giornaliero.">
    <meta property="og:title" content="Dashboard · Fermi Notify">
    <meta property="og:type" content="website">
    <script src="/js/hamburger.js" defer></script>
    <link rel="icon" type="image/x-icon" href="/img/favicon-black.png">
    <!-- css -->
    <link rel="stylesheet" href="/css/style.css" type="text/css">
    <link rel="stylesheet" href="/css/alertbanner.css" type="text/css">
    <link rel="stylesheet" href="/css/cercaeventi.css" type="text/css">
    <link rel="stylesheet" href="/css/page.css" type="text/css">
    <link rel="stylesheet" href="/css/dashboard.css" type="text/css">
    <link rel="stylesheet" href="/css/buymeacoffee.css" type="text/css">

    <link rel="stylesheet" type="text/css" href="css/mdtimepicker.css">
    <script type="text/javascript" src="js/mdtimepicker.js"></script>

    <link rel="preload" href="/css/dark.css" as="style">
	<link rel="preload" href="/css/light.css" as="style">
    <link rel="stylesheet" href="/css/dark.css" type="text/css" id="themeCSS">
    <script src="/js/changeTheme.js"></script>
    <!-- js -->
    <script src="/js/submit-loading.js"></script>
    <title>Dashboard · Fermi Notify</title>
    <!-- Font Awesome -->
    <script src="https://kit.fontawesome.com/95ae55bd9a.js" crossorigin="anonymous"></script>
    <!-- Material Icon -->
	<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <!-- jQuery 3.6.0 -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <!-- Moment.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>

    <script>
        $(document).ready(function(){ writeUserName(); writeUserGender(); });
        var USER_FIRSTNAME = "<%= user_firstname %>";
        var USER_LASTNAME = "<%= user_lastname %>";
        var USER_GENDER = "<%= user_gender %>";
        var NOT_TIME = "<%= n_time %>";
        var NOT_DAY_BEFORE = "<%= n_day_before %>";
        function writeUserName(){
            $(".user-name").html(USER_FIRSTNAME);
        }
        function writeUserGender(){
            switch(USER_GENDER){
                case 'M':
                    $(".user-gender-o-a").html("o");
                    break;
                case 'F':
                    $(".user-gender-o-a").html("a");
                    break;
                default:
                    $("user-gender-o-a").html("ǝ");
                    break;
            }
        }
    </script>

    <script>
        var URLParams = new URLSearchParams(window.location.search);
        var section = URLParams.get("s");

        if(!<%= temp_dash_orario %> && NOT_TIME == "06:00:00" && NOT_DAY_BEFORE == "false"){
            // show orario section + info alert
            section = "orario";
            generateAlert("info", "Puoi personalizzare l'orario di notifica per ricevere le notifiche in anticipo!");
            document.addEventListener("DOMContentLoaded", () => {
                // add blinking (style.css) to .notTime-edit-btn until click
                $(".notTime-edit-btn .fa-solid").css("animation", "blinking 1s infinite");
                $(".notTime-edit-btn").click(function(){
                    $(".notTime-edit-btn .fa-solid").css("animation", "none");
                });
            });
        }
        document.addEventListener("eventsLoaded", () => {
            if (section) {
                // Scroll only after events are loaded
                const observer = new MutationObserver((mutations, obs) => {
                    let scroll = document.getElementById(section).getBoundingClientRect().top + window.scrollY - 50;
                    window.scrollTo({
                        top: scroll,
                        behavior: 'smooth'
                    });
                    obs.disconnect(); // Stop observing after scrolling
                });

                // Observe changes inside #events
                observer.observe(document.getElementById("events"), { childList: true, subtree: true });
            }
        });
        history.replaceState({}, document.title, "/" + "dashboard");
    </script>
    
</head>
<body>

    <%- include('includes/navbar.ejs', { isLogged: isLogged, active: 'dashboard' }); %>

    <div class="section">
        <div class="rounded-container">
            <div class="rounded-inner">
                <h1 class="firstTitle">Dashboard di <span class="user-name"></span></h1>
                <p class="firstSubtitle"><span id="greeting"></span> <!--span class="primary-text"--><span class="user-name"></span><!--/span--></p>
            </div>
        </div>

        <!--h2 style="margin-bottom: 25px; color:#fff"><span id="greeting"></span> <span class="highlighted-text"><span class="user-name"></span></span>,</h2-->

        <p class="information"><i class="fa-solid fa-triangle-exclamation" style="color: var(--on-surface-primary);"></i> Il sistema non è ufficialmente riconosciuto dalla presidenza dell'Istituto Superiore "Enrico Fermi" di Mantova. Eventuali malfunzionamenti sono a carico dello staff e non sono valide giustificazioni in uffici di segreteria e presidenza.</p>

        <!-- Keyword form -->
        <div class="sub-section">
            <h2 style="margin-bottom: 10px;"><i class="fa-solid fa-key"></i> Le tue keywords</h2>

            <div class="keywords-container">
                <button class="btn keyword-edit-btn outlined" onclick="keywordEdit()"><i class="fa-solid fa-pen-to-square"></i></button>
                <ul id="keyword-list">
                    <% if (locals.keywords) { %>
                        <% keywords.forEach(kw=> { %>
                            <li class="keyword" onclick="deleteKeyword(this)">
                                <span class="keyword-list-bullet"><i class="fa-solid fa-square"></i></span>
                                <%= kw %>
                            </li>
                        <% }) %>
                    <% } %>
                </ul>


                <div class="keywords-form-container">

                    <form action="/user/keyword" method="POST" class="keywords material-textfield" onsubmit="loading(0)" id="submitForm">
                        <input type="text" id="keyword" name="keyword" placeholder="Es. 5CIIN" class="keyword-input" required style="text-transform: uppercase;"/>
                        <script>
                            $(function() {
                                $('#keyword').keyup(function() {
                                    this.value = this.value.toLocaleUpperCase();
                                });
                            });
                        </script>

                        <button class="btn filled addButton submit-btn" type="submit"><i class="fa-solid fa-chevron-right"></i></button>

                    </form>
                </div>

                <div class="maggioriInfo-container">
                    <p id="maggioriInfo" class="maggioriInfo"><i class="fa-solid fa-circle-info"></i> <span style="text-decoration: underline; text-decoration-color: var(--on-surface-primary); cursor:pointer">Maggiori informazioni</span></p>
                    <ul class="keywords-info" id="keywordsInfo" style="display: none;">
                        <li>Aggiungi le parole chiave alla lista per essere notificat<span class="user-gender-o-a"></span> quando è presente un evento che la riguarda nel calendario giornaliero. Ti consigliamo di inserire la tua classe e il tuo cognome.</li>
                        <li>Per rimuovere una parola chiave, reinseriscila o clicca sul bottone <i class="fa-solid fa-pen-to-square"></i>.</li>
                        <li>Per ulteriori dettagli, visita il <a href="./faq" class="link">FAQ</a>.</li>
                    </ul>
                </div>

                <script>
                    // show/hide keywords info
                    $('#maggioriInfo').click(function () {
                        $('#keywordsInfo').slideToggle(500);
                    });
                </script>

            </div>
        </div>

        <script>
            // edit keywords
            var is_editing = false;
            function keywordEdit(){
                is_editing = !is_editing;
                $(".keyword-edit-btn").toggleClass("outlined filled");
                if(is_editing){
                    $(".keyword-list-bullet i").removeClass("fa-square").addClass("fa-square-xmark");
                    $(".keyword").addClass("keyword-editing");
                    $(".keyword").hover(function(){
                        $(this).find(".keyword-list-bullet i").removeClass("fa-square-xmark").addClass("fa-trash");
                    }, function(){
                        $(this).find(".keyword-list-bullet i").removeClass("fa-trash").addClass("fa-square-xmark");
                    });
                }else{
                    $(".keyword-list-bullet i").removeClass("fa-square-xmark").addClass("fa-square");
                    $(".keyword-edit-btn").css("animation", "none");
                    $(".keyword").removeClass("keyword-editing");
                    $(".keyword").off("mouseenter mouseleave");
                }
            }

            function deleteKeyword(kw_del){
                if(is_editing){
                    $(kw_del).remove();
                    $.ajax({
                        type: 'POST',
                        url: '/user/keyword',
                        data: JSON.stringify({keyword: $(kw_del).text()}),
                        success: function (data) { /*alert('data: ' + data);*/ },
                        error: function (error) {
                            console.warn(error);
                        },
                        contentType: "application/json",
                        dataType: 'json'
                    });
                    
                    //events(); // TODO update events without reloading the page + update recommended keywords
                }
            }
        </script>
        <!------------------>

        <!-- Events -->
        <div class="sub-section" id="events">
            <h2><i class="fa-solid fa-calendar-days"></i> Eventi in programma</h2>
            <div id="events-loading" style="display: flex; justify-content: flex-start;">
                <div class="lds-grid">
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            </div>
            <!-- today -->
            <div id="events-0" class="events-container">
                <h3 class="events-date" id="events-0-date"></h3>
                <div id="events-0-eventslist"></div>
            </div>
            <!-- tomorrow -->
            <div id="events-1" class="events-container">
                <h3 class="events-date" id="events-1-date"></h3>
                <div id="events-1-eventslist"></div>
            </div>
            <!-- dopotomorrow -->
            <div id="events-2" class="events-container">
                <h3 class="events-date" id="events-2-date"></h3>
                <div id="events-2-eventslist"></div>
            </div>
            <!-- dopodopotomorrow -->
            <div id="events-3" class="events-container">
                <h3 class="events-date" id="events-3-date"></h3>
                <div id="events-3-eventslist"></div>
            </div>
        </div>
        <!------------------>

        <!-- ON/OFF SETTINGS -->
        <div class="sub-section">
            <h2><i class="fa-solid fa-gear"></i> Impostazioni</h2>

            <div class="impostazioni-container">

            <div class="invioNotificheContainer" id="canali">
                <p style="padding-bottom: 10px"><i class="fa-solid fa-message primary-text"></i>
                    <span>Canali notifiche</span>
                </p>
                <div class="checkNot-container sendEmail">
                    Email
                    <label class="switch">
                        <input type="checkbox" checked class="checkbox" id="sendEmail"
                            onclick="submitPreferences()">
                        <span class="slider round"></span>
                    </label>
                </div>
                <% if (tgun.charAt(0) !='X' ) { %>
                    <div class="checkNot-container sendEmail">
                        Telegram
                        <label class="switch">
                            <input type="checkbox" checked class="checkbox" id="sendTelegram"
                                onclick="submitPreferences()">
                            <span class="slider round"></span>
                        </label>
                    </div>
                <% } %>
            </div>

            <div class="invioNotificheContainer" id="orario" style="position: relative; padding-bottom: 10px; border-bottom: 1px solid var(--on-surface);">
                <p style="padding-bottom: 10px; border-bottom: 1px solid var(--on-surface);"><i class="fa-solid fa-clock primary-text"></i>
                    <span>Orario Daily Notification</span>
                </p>

                <div class="notTime" style="margin: 10px 0;">

                    <div class="giorno">
                        <label for="day">Giorno</label>
                        <div class="flex-y-center">
                            <select class="dashboard-select" name="notTime" disabled>
                                <option id="m0" value="0">Alla mattina</option>
                                <option id="m1" value="1">Il giorno prima</option> <!-- minus 1 -->
                            </select>
                        </div>
                    </div>

                    <div class="ora">
                        <label>Ora</label>
                        <div class="flex-y-center">
                            <input name="notTime" type="text" id="timepicker" class="dashboard-input dashboard-time" disabled style="width: 75px;">
                        </div>
                    </div>

                    <div class="dashboard-edit-btn-container">
                        <div class="dashboard-toEdit-btns dashboard-toEdit-btns-notTime flex-y-center">
                            <a class="btn text notTime-edit-btn" onclick="editNotTime()"><i class="fa-solid fa-pen"></i></a>
                            <div class="lds-grid"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                        </div>
                        <div class="dashboard-editing-btns dashboard-editing-btns-notTime">
                            <a class="btn text" onclick="stopEditNotTime()"><i class="fa-solid fa-xmark"></i></a>
                            <a class="btn text" onclick="notTimeSubmit()"><i class="fa-solid fa-check"></i></a>
                        </div>
                    </div>
                </div>
                    
                <script>
                    // https://github.com/dmuy/MDTimePicker
                    let time = moment(NOT_TIME, "HH:mm:ss").format("HH:mm");
                        
                    // if NOT_DAY_BEFORE true then it's day before
                    let day = NOT_DAY_BEFORE == "true" ? 1 : 0;
                    
                    $(document).ready(function() {

                        document.getElementById("m" + day).selected = true; 

                        if (day == 1) {
                            mdtimepicker('#timepicker', { is24hour: true, theme: 'dark', clearBtn: false, minTime: '0:00', maxTime: '23:55' });
                            mdtimepicker('#timepicker', 'setValue', time);
                        }else{
                            mdtimepicker('#timepicker', { is24hour: true, theme: 'dark', clearBtn: false, minTime: '0:00', maxTime: '08:10' });
                            mdtimepicker('#timepicker', 'setValue', time);
                        }
                    });

                    $('.notTime .dashboard-select').on('change', function(event) {
                        let day_el = $("select[name='notTime']").val();
                        if(day_el == 1){
                            mdtimepicker('#timepicker', 'destroy');
                            mdtimepicker('#timepicker', { is24hour: true, theme: 'dark', clearBtn: false, minTime: '0:00', maxTime: '23:55' });
                            $("#timepicker").val("");
                        }else{
                            mdtimepicker('#timepicker', 'destroy');
                            mdtimepicker('#timepicker', { is24hour: true, theme: 'dark', clearBtn: false, minTime: '0:00', maxTime: '08:10' });
                            $("#timepicker").val("");
                        }
                        return false;
                    });

                    function editNotTime(){
                        $("select[name='notTime']").prop("disabled", false);
                        $("#timepicker").prop("disabled", false);
                        $(".notTime-edit-btn").css("display", "none");
                        $(".dashboard-editing-btns-notTime").css("display", "flex");
                    }
                    function stopEditNotTime(){
                        $("select[name='notTime']").prop("disabled", true);
                        $("#timepicker").prop("disabled", true);
                        $(".notTime-edit-btn").css("display", "flex");
                        $(".dashboard-editing-btns-notTime").css("display", "none");
                        let day_el = NOT_DAY_BEFORE == "true" ? 1 : 0;
                        document.getElementById("m" + day_el).selected = true;
                        if(day_el == 1){
                            mdtimepicker('#timepicker', 'destroy');
                            mdtimepicker('#timepicker', { is24hour: true, theme: 'dark', clearBtn: false, minTime: '0:00', maxTime: '23:55' });
                            mdtimepicker('#timepicker', 'setValue', time);
                        }else{
                            mdtimepicker('#timepicker', 'destroy');
                            mdtimepicker('#timepicker', { is24hour: true, theme: 'dark', clearBtn: false, minTime: '0:00', maxTime: '08:10' });
                            mdtimepicker('#timepicker', 'setValue', time);
                        }
                    }
                    function notTimeSubmit(){

                        $(".dashboard-editing-btns-notTime").css("display", "none");
                        $(".dashboard-toEdit-btns-notTime .lds-grid").css("display", "inline-block");

                        let day_before_el = true ? $("select[name='notTime']").val() == 1 : false;
                        let time_el = $("#timepicker").val();
                        // check if time is valid
                        if(time_el == "" || time_el == null || (!day_before_el && time_el > "08:10")){
                            var alert = new AlertBanner("error", "Inserisci un orario valido.");
                            alert.show();
                            $("#timepicker").val(NOT_TIME.split(":").slice(0, 2).join(":"));
                            $("select[name='notTime']").prop("disabled", true);
                            $("#timepicker").prop("disabled", true);
                            $(".dashboard-toEdit-btns-notTime .lds-grid").css("display", "none");
                            $(".notTime-edit-btn").css("display", "flex");
                            return;
                        }
                        $.ajax({
                            type: 'POST',
                            url: '/user/notification-time',
                            data: JSON.stringify({ day: day_before_el, time: time_el }),
                            success: function (response) { 
                                $("select[name='notTime']").prop("disabled", true);
                                $("#timepicker").prop("disabled", true);
                                
                                $(".dashboard-toEdit-btns-notTime .lds-grid").css("display", "none");
                                $(".notTime-edit-btn").css("display", "flex");
                                
                                NOT_TIME = time_el;
                                time = moment(NOT_TIME, "HH:mm:ss").format("HH:mm");
                            },
                            error: function (error) {
                                console.warn(error);
                            },
                            contentType: "application/json",
                            dataType: 'json'
                        });
                    }
                </script>

            </div>

            </div>

            <button class="btn filled submit-btn my-10px" onclick="loading(1); window.location.href='/logout'"><i class="fa-solid fa-sign-out"></i> Logout</button>

            <script>
                const submitPreferences = () => {
                    let tg = "<%= tgun.charAt(0) %>" != 'X';
                    let preferences;
                    if (tg) {
                        preferences = {
                            telegram: document.getElementById("sendTelegram").checked,
                            email: document.getElementById("sendEmail").checked
                        };
                    } else {
                        preferences = {
                            email: document.getElementById("sendEmail").checked
                        };
                    }
                    $.ajax({
                        type: 'POST',
                        url: '/user/notification-preferences',
                        data: JSON.stringify(preferences),
                        success: function (data) { /*alert('data: ' + data);*/ },
                        error: function (error) {
                            console.warn(error);
                            // todo err banner
                        },
                        contentType: "application/json",
                        dataType: 'json'
                    });
                }
            </script>

            <script>
                let preferencesId = <%= n_pref %>;
                let tg = "<%= tgun.charAt(0) %>" != 'X';
                if (tg) {
                    switch (preferencesId) {
                        case 3:
                            document.getElementById("sendTelegram").checked = true;
                            document.getElementById("sendEmail").checked = true;
                            break;
                        case 2:
                            document.getElementById("sendTelegram").checked = false;
                            document.getElementById("sendEmail").checked = true;
                            break;
                        case 1:
                            document.getElementById("sendTelegram").checked = true;
                            document.getElementById("sendEmail").checked = false;
                            break;
                        case 0:
                            document.getElementById("sendTelegram").checked = false;
                            document.getElementById("sendEmail").checked = false;
                            break;
                        default:
                            console.log("Merda.");
                    }
                } else {
                    switch (preferencesId) {
                        case 3:
                            document.getElementById("sendEmail").checked = true;
                            break;
                        case 2:
                            document.getElementById("sendEmail").checked = true;
                            break;
                        case 1:
                            document.getElementById("sendEmail").checked = false;
                            break;
                        case 0:
                            document.getElementById("sendEmail").checked = false;
                            break;
                        default:
                            console.log("Merda.");
                    }
                }
            </script>
        </div>
        <!------------------>

        <!-- Telegram -->
        <div class="sub-section" id="Telegram">
            <h2><i class="fa-brands fa-telegram"></i> Telegram</h2>
            <% if (tgun.charAt(0)==='X' ) { %>
                <p style="margin-bottom: 20px">Ricevi la notifica tramite messaggio su Telegram.</p>
                <p>Per essere notificat<span class="user-gender-o-a"></span> su Telegram, manda
                </p>
                <p onclick="copy()" class="telegramCodeContainer"><i class="fa-solid fa-copy"></i> <span
                        id="telegramCode"><code><%= tgun %></code></span>
                </p>
                <p>a <b><a href="https://t.me/FermiNotifierBot" target="_blank"
                            class="link">@FermiNotifierBot</a></b> su
                    Telegram.</p>
                <% } else { %>
                    <p>Il tuo account telegram risulta correttamente collegato! (ID:
                        <code><%= tgun %></code>)
                    </p>
                    <% } %>

        </div>
        <!------------------>

        <!-- Info -->
        <div class="sub-section info">
            <h2><i class="fa-solid fa-user"></i> Le tue info</h2>
            <!--form method="POST" action="/user/edit"-->

            <div class="user-info-container">

            <div>
                <label>Nome</label>
                <div class="flex-y-center">
                    <input type="text" autocomplete="off" name="firstname" placeholder="<%= user_firstname %>" class="dashboard-input" disabled required maxlength="50">
                    <div class="dashboard-edit-btn-container">
                        <div class="dashboard-toEdit-btns dashboard-toEdit-btns-firstname flex-y-center" style="gap: 10px">
                            <a class="btn text info-edit-btn-firstname" onclick="editInfo('firstname')"><i class="fa-solid fa-pen"></i></a>
                            <div class="lds-grid"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                        </div>
                        <div class="dashboard-editing-btns dashboard-editing-btns-firstname">
                            <a class="btn text" onclick="stopEdit('firstname')"><i class="fa-solid fa-xmark"></i></a>
                            <a class="btn text" onclick="stopEdit('firstname')"><i class="fa-solid fa-check"></i></a>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <label>Cognome</label>
                <div class="flex-y-center">
                    <input type="text" autocomplete="off" name="lastname" placeholder="<%= user_lastname %>" class="dashboard-input" disabled required maxlength="50">
                    <div class="dashboard-edit-btn-container">
                        <div class="dashboard-toEdit-btns dashboard-toEdit-btns-lastname flex-y-center">
                            <a class="btn text info-edit-btn-lastname" onclick="editInfo('lastname')"><i class="fa-solid fa-pen"></i></a>
                            <div class="lds-grid"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                        </div>
                        <div class="dashboard-editing-btns dashboard-editing-btns-lastname">
                            <a class="btn text" onclick="stopEdit('lastname')"><i class="fa-solid fa-xmark"></i></a>
                            <a class="btn text" onclick="stopEdit('lastname')"><i class="fa-solid fa-check"></i></a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="gender">
                <label for="Gender">Genere</label>
                <div class="flex-y-center">
                    <select class="dashboard-select" name="gender" disabled>
                        <option id="F" value="F">Donna (F)</option>
                        <option id="M" value="M">Uomo (M)</option>
                        <option id="X" value="X">Altro (ǝ)</option>
                    </select>
                    <div class="dashboard-edit-btn-container">
                        <div class="dashboard-toEdit-btns dashboard-toEdit-btns-gender flex-y-center">
                            <a class="btn text info-edit-btn-gender" onclick="editInfo('gender')"><i class="fa-solid fa-pen"></i></a>
                            <div class="lds-grid"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                        </div>
                        <div class="dashboard-editing-btns dashboard-editing-btns-gender">
                            <a class="btn text" onclick="stopEdit('gender')"><i class="fa-solid fa-xmark"></i></a>
                            <a class="btn text" onclick="stopEdit('gender')"><i class="fa-solid fa-check"></i></a>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <label>Email</label>
                <div class="flex-y-center">
                    <input type="text" autocomplete="off" name="email" placeholder="<%= email %>" class="dashboard-input" disabled required>
                    <div class="dashboard-edit-btn-container">
                        <!--
                        <i class="fa-solid fa-pen info-edit-btn-email" onclick="editInfo('email')"></i>
                        <div class="dashboard-editing-btns dashboard-editing-btns-email">
                            <i class="fa-solid fa-xmark" onclick="stopEdit('email')"></i>
                            <button type="submit"><i class="fa-solid fa-check"></i></button>
                        </div>
                        -->
                    </div>
                </div>
            </div>
            <!--/form-->

            </div>

        </div>
        <script>
            $(document).ready(function() {
                $('.info .dashboard-input').on('focus', function() {
                    var placeholderValue = $(this).attr('placeholder');
                    if($(this).val() == ''){
                        $(this).val(placeholderValue);
                    }
                    $(this).addClass('dashboard-input-active');

                    $('.info-edit-btn-' + $(this).attr('name')).css('display', 'none');
                    $('.dashboard-editing-btns-' + $(this).attr('name')).css('display', 'flex');
                });
                $('.info .dashboard-input').on('blur', function() {
                    var inputValue = $(this).val();
                    if(inputValue == $(this).attr('placeholder')){
                        stopEdit($(this).attr('name'));
                    }else{
                        $(this).addClass('inserted');
                    }
                    $(this).removeClass('dashboard-input-active');
                });
                $('.gender .dashboard-select').on('change', function(event) {
                    var selected = $(event.target).val();
                    if (selected != USER_GENDER) {
                        $(".dashboard-editing-btns-gender i.fa-check").attr("onclick", "updateInfo('gender');");
                        $(".dashboard-select").addClass("inserted");
                    } else {
                        $(".dashboard-editing-btns-gender i.fa-check").attr("onclick", "stopEdit('gender');");
                        $(".dashboard-select").removeClass("inserted");
                    }
                });
                $('.info .dashboard-input').on('input', function() {
                    var inputValue = $(this).val();
                    var placeholderValue = $(this).attr('placeholder');
                    if(inputValue != placeholderValue){
                        $(".dashboard-editing-btns-" + $(this).attr('name')).find("i.fa-check").attr("onclick", "updateInfo('" + $(this).attr('name') + "');");
                    }else{
                        $(".dashboard-editing-btns-" + $(this).attr('name')).find("i.fa-check").attr("onclick", "stopEdit('" + $(this).attr('name') + "');");
                    }
                });
            });

            function editInfo(name){
                if(name == "gender"){
                    $("select[name='gender']").prop("disabled", false);
                    $("select[name='gender']").focus();
                    $(".info-edit-btn-gender").css("display", "none");
                    $(".dashboard-editing-btns-gender").css("display", "flex");
                    return;
                }
                $('input[name="' + name + '"]').prop("disabled", false);
                $('input[name="' + name + '"]').focus();
            }

            function stopEdit(name){
                if(name == "gender"){
                    $(".gender .dashboard-select").val(USER_GENDER);
                    $(".dashboard-editing-btns-gender").css("display", "none");
                    $("select[name='gender']").prop("disabled", true);
                    $(".info-edit-btn-gender").css("display", "flex")
                    return;
                }
                $('input[name="' + name + '"]').val('');
                $('.info-edit-btn-' + name).css('display', 'flex');
                $('.dashboard-editing-btns-' + name).css('display', 'none');
                $('input[name="' + name + '"]').prop("disabled", true);
                $('input[name="' + name + '"]').removeClass('inserted');
            }

            $(".gender .dashboard-select").val(USER_GENDER);

            // simulate java concurrent semaphore
            var isUpdating = false;
            function waitUpdate() {
                return new Promise(resolve => {
                    const checkUpdate = () => {
                        if (!isUpdating) resolve();
                        else setTimeout(checkUpdate, 500); // check every half second if is released
                    };
                    checkUpdate();
                });
            }

            async function updateInfo(name){
                var inputUpdateValue = $('input[name="' + name + '"]').val() !== undefined ? $('input[name="' + name + '"]').val() : $('select[name="' + name + '"]').val();
                inputUpdateValue = inputUpdateValue.trim();
                if(inputUpdateValue == "" || inputUpdateValue == $('input[name="' + name + '"]').attr('placeholder') || (name == "gender" && inputUpdateValue == USER_GENDER)){
                    stopEdit(name);
                    return;
                }
                stopEdit(name);
                $(".dashboard-toEdit-btns-" + name + " i.fa-pen").css("display", "none");
                $(".dashboard-toEdit-btns-" + name + " .lds-grid").css("display", "inline-block");
                await waitUpdate();
                isUpdating = true;
                $.ajax({
                    type: "POST",
                    url: "/user/edit",
                    data: {
                        [name]: inputUpdateValue
                    },
                    success: function(response) {
                        if(name == "gender"){
                            $(".gender .dashboard-select").val(inputUpdateValue);
                            USER_GENDER = inputUpdateValue;
                            writeUserGender();
                        }else{
                            $('input[name="' + name + '"]').attr("placeholder", inputUpdateValue);
                            if(name == "firstname") USER_FIRSTNAME = inputUpdateValue;
                            else if(name == "lastname") USER_LASTNAME = inputUpdateValue;
                            writeUserName();
                        }
                        $(".dashboard-toEdit-btns-" + name + " i.fa-pen").css("display", "block");
                        $(".dashboard-toEdit-btns-" + name + " .lds-grid").css("display", "none");
                        isUpdating = false;
                    },
                    error: function (error) {
                        var div = document.createElement("div");
                        div.id = "alertbanner";
                        div.className = "errorbanner showAlert";
                        div.setAttribute("onclick", "this.classList.remove('showAlert'); this.classList.add('hideAlert')");
                        div.innerHTML = "<ul style=\"list-style: none; padding-left: 0; margin:0;\"><li id=\"alertmessage\"><i class=\"fa-solid fa-circle-exclamation\"></i> " + error.responseJSON?.message || error.responseText || "Errore sconosciuto"; + "</li></ul>";
                        document.body.appendChild(div);
                        console.warn(error);
                        $(".dashboard-toEdit-btns-" + name + " i.fa-pen").css("display", "block");
                        $(".dashboard-toEdit-btns-" + name + " .lds-grid").css("display", "none");
                        isUpdating = false;
                    },
                });
            }
        </script>
        <!------------------>

        <!-- Notifiche -->
        <div class="sub-section">
            <h2><i class="fa-solid fa-bell"></i> Notifiche</h2>
            <span>&gt Hai ricevuto
                <%= n_not %> notifiche
            </span>
        </div>
        <!------------------>

        <!-- FEEDBACK & RECRUITING -->
        <style>
            #feedback-recruiting{
			    margin: 17px 0 25px 0;
		    }
            #feedback-recruiting .card-1 i{
                font-size: 25px; transition: transform 0.3s cubic-bezier(0.2, 0, 0, 1);
            }
            #feedback-recruiting .flex-col-center{
                width: 100%; color: var(--on-surface); text-decoration: none; box-sizing: border-box;
            }
            #feedback-recruiting div > a.card-1:first-of-type:hover {
                border-color: var(--surface-variant);
                color: var(--on-surface-variant);
            }
            #feedback-recruiting div > a.card-1:first-of-type:before {
                background-color: var(--surface-variant);
                top: 100% !important;
                left: -25px !important;
            }
            #feedback-recruiting div > a.card-1:last-of-type:hover {
                border-color: var(--primary);
                color: var(--on-primary);
            }
            #feedback-recruiting div > a.card-1:last-of-type:before {
                background-color: var(--primary);
                top: 100% !important;
                left: -25px !important;
            }
            #feedback-recruiting .grid-center-2col{
                width: 100%; gap: 15px;
                grid-template-columns: 1fr 1fr;
                max-width: 600px; /* 300px + 300px */
            }
            @media screen and (max-width: 600px) {
                #feedback-recruiting .grid-center-2col{
                    grid-template-columns: 1fr 1fr;
                    gap: 10px;
                }
                #feedback-recruiting .card-1{
                    flex-direction: row;
                    justify-content: space-evenly;
                    gap: 5px;
                    padding: 15px;
                }
                #feedback-recruiting h4{
                    font-size: 14px;
                }
                #feedback-recruiting .card-1 i{
                    margin: 0px;
                }
            }
        </style>
        <div class="sub-section">
            <h2><i class="fa-solid fa-handshake-angle"></i> Contribuisci a Fermi Notify</h2>
            <!-- BUY ME A COFFEE -->
            <div class="coffee-container" style="justify-content: left;">
                <a class="coffee-button" href="https://www.buymeacoffee.com/ferminotify">
                <h1 class="coffee-arrow">&gt;</h1>
                <div class="coffee-link">
                    <h1 class="coffee-icon"><i class="fa-solid fa-mug-hot"></i></h1>
                    <div class="coffee-text">
                        <h2 class="coffee-text-big">OFFRICI UN CAFF&Egrave;</h2>
                        <span class="coffee-text-small">e supporta il progetto</span>
                    </div>
                </div>
                <h1 class="coffee-arrow">&lt;</h1>
                </a>
            </div>
            <div id="feedback-recruiting">
                <div class="grid-center-2col">
                    <a class="card-1" href="./feedback">
                        <i class="fas fa-comment"></i>
                        <h4 style="margin: 0;">Feedback & suggerimenti</h4>
                    </a>
                    <a class="card-1" href="./recruiting">
                        <i class="fas fa-users"></i>
                        <h4 style="margin: 0;">Candidati per il team</h4>
                    </a>
                </div>
            </div>
        </div>

        <!-- Report a problem -->
        <div class="sub-section reportProblem">
            <p>
                <a href="mailto:mail@fn.lkev.in"><i class="fa-solid fa-circle-exclamation link"></i> <span class="link">Segnala un problema</span></a>
            </p>
            <p>mail@fn.lkev.in</p>
            <p><a href="https://www.instagram.com/ferminotify/" class="link"><i class="fa-brands fa-instagram"></i> ferminotify</a></p>
        </div>

    </div>

    <%- include('includes/footer.ejs') %>

    <script>
        // copy text
        function copy() {
            var r = document.createRange();
            r.selectNode(document.getElementById("telegramCode"));
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(r);
            document.execCommand('copy');
            window.getSelection().removeAllRanges();
            $(".telegramCodeContainer .fa-solid").toggleClass("fa-copy fa-check");
            setTimeout(function(){
                $(".telegramCodeContainer .fa-solid").toggleClass("fa-copy fa-check");
            }, 3000);
        }
    </script>

    <script>
        let today = new Date();
        let hour = today.getHours();
        if (hour < 12) document.getElementById("greeting").innerHTML = "Buongiorno";
        else if (hour < 18) document.getElementById("greeting").innerHTML = "Buon pomeriggio";
        else document.getElementById("greeting").innerHTML = "Buona sera";
    </script>

    <script>
        const url = "https://fn.lkev.in/calendar?format=csv";

        // get keywords from front end list
        function getKeywords(){
            var tempArray = [];
            $(".keyword").each(function () {
                // remoce spaces unless it's between words
                tempArray.push($(this).text().replace(/\s+/g, ' ').trim());
            });
            return tempArray;
        }
        
        var keywords = getKeywords();

        if(keywords.length == 0) $(".keyword-edit-btn").hide();
        
        var eventRunning;

        console.log(keywords);

        async function loadEvents() {
            if (keywords.length == 0) { // no keywords
                $("#events").append("<p style='color: var(--on-surface-primary);'>Nessuna keyword inserita</p>");
                $("#events-loading").hide();
            } else {

                await events();

            }
            document.dispatchEvent(new Event("eventsLoaded"));
        }

        loadEvents();

        async function events(){
            keywords = getKeywords(); // get keywords again so that if a keyword is deleted it's possible to update events without reloading the page
            (async function fetchData() {
                try {
                    $('#events .error-container').remove();
                    $("#events-loading").show();
                    const response = await fetch(url);
                    $("#events-loading").hide();
                    const data = await response.text();
                    await printEvents(data);
                } catch (error) {
                    // print error in the page
                    $("#events").append("<div class='error-container' style='text-align: center'><p class='errorText'><span class='errorTitle'>Errore nel caricamento degli eventi</span> <a class='errorRetry btn text' onclick='events()'><span class='material-symbols-outlined'>autorenew</span> <span>Riprova</span></a></p><p class='errorDescription'>[ " + error.stack + " ]<br><a class='link' href='mailto:mail@fn.lkev.in?subject=Errore caricamento eventi&body=Ciao,%0D%0AHo riscontrato questo errore durante il caricamento degli eventi%0D%0A%0D%0A" + error.stack + "%0D%0A%0D%0Acon le keywords:%0D%0A" + keywords + ".%0D%0A%0D%0A%0D%0A" + moment().format("HH:mm DD/MM/YYYY") + "' style='margin-left: 5px;'> <i class='fa-solid fa-circle-exclamation'></i> Clicca qui per segnalare il problema</a><br>mail@fn.lkev.in</p></div>");
                    $("#events-loading").hide();
                }
            })();
        }

        async function printEvents(data) {

            function getEventHTML(data, startDateString, endDateString) {
                if (endDateString !== undefined) {
                    return `
                        <div class="event ${eventRunning}">
                        <p class="event-title">${data}</p>
                            <div class="event-time">
                                <p class="event-time-start">
                                    <span class="start-end-text"><span class="material-symbols-outlined">start</span></span>
                                    <span>${startDateString}</span>
                                </p>
                                <p class="event-time-end">
                                    <span class="start-end-text"><span class="material-symbols-outlined mirrorElement">start</span></span>
                                    <span>${endDateString}</span>
                                </p>
                            </div>
                        </div>
                    `;
                } else {
                    return `
                        <div class="event ${eventRunning}">
                            <p class="event-title">${data}</p>
                            <div class="event-time">
                                <p class="event-time-start">
                                    <span class="start-end-text"><span class="material-symbols-outlined">schedule</span></span>
                                    <span>${startDateString}</span>
                                </p>
                            </div>
                        </div>
                    `;
                }
            }

            var events = csv2json(data); // events csv --> json

            console.log(events);

            const weekDay=["Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato", "Domenica"];

            const daysShown = 4; // 0 = today, 1 = tomorrow, 2 = day after tomorrow, 3 = day after day after tomorrow

            for (let i = 0; i < daysShown; i++) {
                const html = `<span class='color: primary-text'>${getDayDescription(i)}</span><span>${weekDay[moment().add(i, 'days').isoWeekday()-1]} ${moment().add(i, 'days').format("DD/MM/YYYY")}</span>`;
                $(`#events-${i}-date`).html(html);
            }

            function getDayDescription(daysAhead) {
                switch (daysAhead) {
                    case 0:
                        return 'Oggi';
                    case 1:
                        return 'Domani';
                    case 2:
                        return 'Dopodomani';
                    default:
                        return `Tra ${daysAhead} giorni`;
                }
            }

            var flagThereAreEvents = false; // flag to check if there are events

            var printedUIDs = []; // array of events already printed

            var filteredEvents = []; // array of events filtered by keywords

            // search events for every keyword
            keywords.forEach(kw => {

                // regex --> kw followed by a non-word character
                // filtra eventi per keyword e per data (deve finire dopo oggi)
                filteredEvents = filteredEvents.concat(events.filter(event => (RegExp("\\b" + kw + "\\b", "i").test(event.summary) && ( moment(event["end.dateTime"], "YYYY-MM-DDTHH:mm:ss").isAfter(moment().startOf('day')) || moment(event["end.date"], "YYYY-MM-DD").isAfter(moment().startOf('day'))))));
                console.log(kw);
                console.log(filteredEvents);

            });

            // sort events by date
            filteredEvents.sort(function(a, b) {
                if (a["start.dateTime"] != null && b["start.dateTime"] != null) { // if both events have a start date and time
                    return moment(a["start.dateTime"], "YYYY-MM-DDTHH:mm:ss").diff(moment(b["start.dateTime"], "YYYY-MM-DDTHH:mm:ss"));
                } else if (a["start.dateTime"] != null && b["start.dateTime"] == null) { // if a has a start date and time and b doesn't
                    return moment(a["start.dateTime"], "YYYY-MM-DDTHH:mm:ss").diff(moment(b["start.date"], "YYYY-MM-DD"));
                } else if (a["start.dateTime"] == null && b["start.dateTime"] != null) { // if b has a start date and time and a doesn't
                    return moment(a["start.date"], "YYYY-MM-DD").diff(moment(b["start.dateTime"], "YYYY-MM-DDTHH:mm:ss"));
                } else { // if both events don't have a start date and time
                    return moment(a["start.date"], "YYYY-MM-DD").diff(moment(b["start.date"], "YYYY-MM-DD"));
                }
            });

            if(filteredEvents.length > 0) // no events for this keyword
                flagThereAreEvents = true; // there are events

            // for every event associated with the keyword
            for (var i = 0; i < filteredEvents.length; i++) {

                if(printedUIDs.includes(filteredEvents[i].uid)) // if event already printed
                    continue; // skip event

                printedUIDs.push(filteredEvents[i].uid); // event is printed

                if (filteredEvents[i]["start.dateTime"] != null) { // if event has a start date and time

                    // ora inizio --> ora fine
                    var startDate = moment(filteredEvents[i]["start.dateTime"], "YYYY-MM-DDTHH:mm:ss").format("DD/MM/YYYY HH:mm:ss");
                    var endDate = moment(filteredEvents[i]["end.dateTime"], "YYYY-MM-DDTHH:mm:ss").format("DD/MM/YYYY HH:mm:ss");

                    let tempEndDate = endDate;
                    if(endDate == startDate) // if end date == start date --> temp end date add 1 hour
                        tempEndDate = moment(filteredEvents[i]["end.dateTime"], "YYYY-MM-DDTHH:mm:ss").add(1, 'hours').format("DD/MM/YYYY HH:mm:ss");
                    if(moment(tempEndDate, "DD/MM/YYYY HH:mm:ss").isBefore(moment())) eventRunning = "event-past";
                    else if(moment().isBetween(moment(startDate, "DD/MM/YYYY HH:mm:ss"), moment(tempEndDate, "DD/MM/YYYY HH:mm:ss"))) eventRunning = "event-running";
                    else eventRunning = "";

                    // if start date == end date (same day)
                    if (moment(startDate, "DD/MM/YYYY HH:mm:ss").isSame(moment(endDate, "DD/MM/YYYY HH:mm:ss"), "day")) {

                        // for every day shown
                        for (var gg = 0; gg < daysShown; gg++) {

                            // if filteredEvents "start.date" is today + gg
                            if (moment(startDate, "DD/MM/YYYY HH:mm:ss").isSame(moment().add(gg, 'days'), "day")) {

                                $("#events-" + gg).css("display", "block");
                                // if start and end time matches --> print the time only once
                                if (moment(startDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm") == moment(endDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm")) {
                                    $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm")));
                                } else { // if start and end time doesn't match --> print start and end time
                                    $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm")));
                                }

                            }

                        }

                    } else { // if start date != end date --> print day and time (events that last more than one day)

                        // for every day shown
                        for (var gg = 0; gg < daysShown; gg++) {

                            if (moment(startDate, "DD/MM/YYYY HH:mm:ss").isSame(moment().add(gg, 'days'), "day")) { // if start date is today + gg
                                $("#events-" + gg).css("display", "block");
                                $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY HH:mm")));
                            }else if(moment(endDate, "DD/MM/YYYY HH:mm:ss").isSame(moment().add(gg, 'days'), "day")){ // if end date is today + gg
                                $("#events-" + gg).css("display", "block");
                                $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY HH:mm"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm")));
                            }else if(moment(startDate, "DD/MM/YYYY HH:mm:ss").isBefore(moment().add(gg, 'days'), "day") && moment(endDate, "DD/MM/YYYY HH:mm:ss").isAfter(moment().add(gg, 'days'), "day")){ // if event starts before today + gg and ends after today + gg
                                $("#events-" + gg).css("display", "block");
                                $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY HH:mm"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY HH:mm")));
                            }

                        }

                    }


                } else {

                    // giorno --> giorno (orario not specified)
                    var startDate = moment(filteredEvents[i]["start.date"], "YYYY-MM-DD").format("DD/MM/YYYY");
                    var endDate = moment(filteredEvents[i]["end.date"], "YYYY-MM-DD").format("DD/MM/YYYY");

                    if(moment(endDate, "DD/MM/YYYY").isBefore(moment())) eventRunning = "event-past";
                    else if(moment().isBetween(moment(startDate, "DD/MM/YYYY"), moment(endDate, "DD/MM/YYYY"))) eventRunning = "event-running";
                    else eventRunning = "";

                    // for every day shown
                    for (var gg = 0; gg < daysShown; gg++) {

                        // if starts today + gg
                        if (moment(startDate, "DD/MM/YYYY").isSame(moment().add(gg, 'days'), "day") || (moment(startDate, "DD/MM/YYYY").isBefore(moment().add(gg, 'days'), "day") && moment(endDate, "DD/MM/YYYY").isAfter(moment().add(gg, 'days'), "day"))) {

                            $("#events-" + gg).css("display", "block");
                            $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY")));

                        }

                    }

                }

            }

            // if there are no events --> print "Nessun evento trovato"
            if (!flagThereAreEvents) {
                $("#events").append("<p style='color: var(--on-surface-primary);'>Nessun evento trovato</p>");
            }

            $('.events-container:visible:last').css('margin-bottom', '0');
        }


        // data is fetched in csv --> convert to json
        function csv2json(text, headers, quoteChar = '"', delimiter = ',') {
            const regex = new RegExp(`\\s*(${quoteChar})?(.*?)\\1\\s*(?:${delimiter}|$)`, 'gs');

            const match = line => [...line.matchAll(regex)]
                .map(m => m[2])  // we only want the second capture group
                .slice(0, -1);   // cut off blank match at the end

            const lines = text.split('\n');
            const heads = headers ?? match(lines.shift());

            return lines.map(line => {
                return match(line).reduce((acc, cur, i) => {
                    // Attempt to parse as a number; replace blank matches with `null`
                    const val = cur.length <= 0 ? null : Number(cur) || cur;
                    const key = heads[i] ?? `extra_${i}`;
                    return { ...acc, [key]: val };
                }, {});
            });
        }
    </script>

    <%- include('includes/alertbanner.ejs') %>

</body>

</html>